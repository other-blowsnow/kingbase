name: Publish Docker Images

on:
  release:
    types: [published, edited]  # 监听发布事件

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch:
          - amd
          - arm

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up version
        id: version
        run: |
          # 从 GitHub 事件上下文中提取下载地址
          RELEASE_BODY="${{ github.event.release.body }}"
          ARCH=${{ matrix.arch }}
          # 从 GitHub 事件上下文中提取版本号
          VERSION=${{ github.event.release.tag_name }}  # 提取版本标签
          echo "VERSION=${VERSION}" >> $GITHUB_ENV  # 存入环境变量
          
          if [ "$ARCH" == "amd" ]; then
            TEMP_ARCH = "x86_64"
          elif [ "$ARCH" == "arm" ]; then
            TEMP_ARCH = "aarch64"
           else
            echo "Unsupported architecture"
            exit 1
          fi
          DOWNLOAD_URL=$(echo "$RELEASE_BODY" | sed  -e "s/系统版本/${TEMP_ARCH}/")
          # 替换 RELEASE_BODY 里面的变量 系统版本，输出到 GITHUB_ENV  url里面
          echo "url=${DOWNLOAD_URL}" >> $GITHUB_ENV
          
      # - name: Cache Docker image tar
      #   uses: actions/cache@v3
      #   with:
      #     path: docker_image.tar
      #     key: ${{ runner.os }}-docker-${{ matrix.arch }}-${{ steps.version.outputs.version }}
          
      - name: Download Docker image tar
        run: |
          if [[ ! -f docker_image.tar ]]; then
            echo "Downloading Docker image: ${env.url}"
            curl -L ${{ env.url }} -o docker_image.tar
          else
            echo "Using cached Docker image."
          fi

      - name: Load Docker image
        run: |
          docker load -i docker_image.tar

      - name: Tag Docker image
        id: tag
        run: |
          VERSION=${{ env.VERSION }}
          IMAGE_ID=$(docker images -q | head -n 1)  # 获取最新构建的镜像 ID
          TAG_NAME="ghcr.io/other-blowsnow/kingbase:${{ matrix.arch }}_${VERSION}"
          echo "Image Tag: $TAG_NAME"
          docker tag $IMAGE_ID $TAG_NAME
          echo "::set-output name=tag::$TAG_NAME"

      - name: Push Docker image
        run: |
          TAG_NAME=${{ steps.tag.outputs.tag }}
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker push $TAG_NAME
